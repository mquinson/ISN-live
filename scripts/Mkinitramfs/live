# live filesystem mounting			-*- shell-script -*-

# Parameter: none
# Echos devices tried to get root
#       built of home 
# Return value: indicates if root is mount

RAMSIZE=1000000
ISN_DIR=isnbs
ISN_NAME=base
LISTE_EXTENSIONS=extensions_${ISN_NAME}
MARQUEUR=${ISN_DIR}/${ISN_NAME}
# if BRUTAL then even unknown FS are tested (sometimes this abruti doesn't known
# that is vfat on my test.
BRUTAL=Yes
DEBUG=Yes

MONTAGE=/tmp/__tempo_isn

get_fstype ()
{
	local FS FSTYPE FSSIZE RET
	FS="${1}"

	# vol_id has a more complete list of file systems,
	# but fstype is more robust
	eval $(fstype "${FS}" 2> /dev/null)
	if [ "$FSTYPE" = "unknown" ] && [ -x /lib/udev/vol_id ]; then
		FSTYPE=$(/lib/udev/vol_id -t "${FS}" 2> /dev/null)
	fi
	RET=$?

	if [ -z "${FSTYPE}" ]; then
		FSTYPE="unknown"
	fi

	echo "${FSTYPE}"
	return ${RET}
}

pre_mountroot()
{
    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/live-top"
    run_scripts /scripts/live-top
    [ "$quiet" != "y" ] && log_end_msg
    
    
    log_begin_msg "Searching for base system"
    
	# Default delay is 10s
    if [ -z "${LIVEDELAY}" ]; then
	delai=10
    else
	delai=${LIVEDELAY}
    fi
    
    /bin/sleep $delai
    
# Bon, let's try all bazar in /sys/block/* different of ram and loop

    CANDIDATS=`ls /sys/block`
    
# point de montage
    
    mkdir -p $MONTAGE
    
    for ATESTER in $CANDIDATS ; do
#	        echo $ATESTER
		# give hint about renamed root
	case "${ATESTER}" in 
	    loop*)
		;;
	    ram*)
# bon, nothing to do next candidats
		;;
	    *)
		FS_TYPE=$(get_fstype "/dev/${ATESTER}")
		if [ $DEBUG = "Yes" ] ; then echo $FS_TYPE ;fi
		if [ "$FS_TYPE" = "unknown" ] ; then
		    if [ $BRUTAL = "Yes" ] ; then
			if [ $DEBUG = "Yes" ] ; then echo -n "$ATESTER"... ; fi
			mount /dev/${ATESTER} $MONTAGE 2> /dev/null
			if [ -f ${MONTAGE}/${MARQUEUR} ] ; then
			    if [ $DEBUG = "Yes" ] ; then echo Found $ATESTER ; fi
			    ROOT=/dev/${ATESTER}
			    umount  $MONTAGE
			fi
			umount $MONTAGE 2> /dev/null
			if [ $DEBUG = "Yes" ] ; then echo "OK" ; fi
		    fi
		    for SOUSATESTER in `ls -d /sys/block/${ATESTER}/${ATESTER}* 2> /dev/null` ; do
			SOUSPERIF=${SOUSATESTER#/sys/block/${ATESTER}/}
			if [ $DEBUG = "Yes" ] ; then echo ${SOUSPERIF} ; fi
			FS_TYPE=$(get_fstype "/dev/${SOUSPERIF}")
			if [ $DEBUG = "Yes" ] ; then echo $FS_TYPE ; fi
			if [ ! "$FS_TYPE" = "unknown" ] ; then
			    modprobe $FS_TYPE 2> /dev/null
			    mount -t $FS_TYPE /dev/${SOUSPERIF} $MONTAGE 2> /dev/null
			    if [ -f ${MONTAGE}/${MARQUEUR} ] ; then
				if [ $DEBUG = "Yes" ] ; then echo Found $SOUSPERIF ; fi
				ROOT=/dev/${SOUSPERIF}
				umount  $MONTAGE
				break
			    fi
			    umount $MONTAGE 2> /dev/null
			else if [ $BRUTAL = "Yes" ] ; then
			    if [ $DEBUG = "Yes" ] ; then echo -n "$SOUSPERIF"... ; fi
			    mount /dev/${SOUSPERIF} $MONTAGE 2> /dev/null
			    if [ -f ${MONTAGE}/${MARQUEUR} ] ; then
				if [ $DEBUG = "Yes" ] ; then echo Found $SOUSPERIF ; fi
				ROOT=/dev/${SOUSPERIF}
				umount  $MONTAGE
				break
			    fi
			    umount $MONTAGE 2> /dev/null
			    if [ $DEBUG = "Yes" ] ; then echo "OK" ; fi
			fi
		fi
		    done
		    else
		    modprobe $FS_TYPE 2> /dev/null
		    mount -t $FS_TYPE /dev/${ATESTER} $MONTAGE 2> /dev/null
		    if [ -f ${MONTAGE}/$${MARQUEUR} ] ; then
			if [ $DEBUG = "Yes" ] ; then echo Found $ATESTER ; fi
		    fi
		    umount $MONTAGE 2> /dev/null
		    fi
	esac
	if [ ! -z $ROOT ] ; then break ; fi
    done
    if [ -z $ROOT ] ; then
	echo "Base system not found, fropping to a limited shell"
	echo "Sorry and good luck..."
	panic "File ${MARQUEUR} not found on block devices, dropping shell"
    fi
}

mountroot()
{
    pre_mountroot
    
	# Get the root filesystem type if not set
    if [ -z "${ROOTFSTYPE}" ]; then
	FSTYPE=$(get_fstype "${ROOT}")
	else
		FSTYPE=${ROOTFSTYPE}
	fi

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-premount"
	run_scripts /scripts/local-premount
	[ "$quiet" != "y" ] && log_end_msg

	if [ "${readonly}" = "y" ]; then
		roflag=-r
	else
		roflag=-w
	fi

	# FIXME This has no error checking
	modprobe ${FSTYPE}

	# FIXME This has no error checking
	# Mount root
	mount ${roflag} -t ${FSTYPE} ${ROOTFLAGS} ${ROOT} ${rootmnt}

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-bottom"
	run_scripts /scripts/local-bottom
	[ "$quiet" != "y" ] && log_end_msg
}
